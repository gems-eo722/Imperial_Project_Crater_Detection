{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9YehS8enAmDn"
      },
      "source": [
        "<img src=\"https://drive.google.com/uc?id=1dFgNX9iQUfmBOdmUN2-H8rPxL3SLXmxn\" width=\"400\"/>\n",
        "\n",
        "\n",
        "---\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gD4VUfPGx8Oy"
      },
      "source": [
        "### ***Name***: [*OVUEDE ESEOGHENE*]\n",
        "### ***CID***: [*02001299*]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uRlgsfRcx9sT"
      },
      "source": [
        "# Instructions:\n",
        "\n",
        "Follow the instructions below to complete the coursework and submit it:\n",
        "\n",
        "<br>\n",
        "\n",
        "1. Complete your coursework using this provided Jupyter Notebook template (use Google Colab or your local machine). Your copy of the notebook should be named: `yourusername_DLModuleResit.ipynb`. And don't forget to fill in the two fields at the top of this notebook with your name and CID number.\n",
        "\n",
        "<br>\n",
        "\n",
        "3. Once you have completed your answers, upload your final notebook to the repo you got from the github classroom link. Make sure to have all the answers in there:\n",
        "\n",
        "   - **All the cells in your final Jupyter Notebook should be executed before saving and uploading to github in order to have the output of the cells available in the uploaded version** (images you plot, training graphs generated with `livelossplot`, etc). We will not rerun code blocks in the notebooks, it is your responsibility to run them before uploading the notebook.\n",
        "\n",
        "   - Add comments in the code to explain what you are doing at every step.\n",
        "\n",
        "   - All answers requiring written answers (ie, not code) should be in markdown blocks in the Jupyter Notebook. This provided Jupyter Notebook template has allocated blocks for the questions, but **you can add any coding or markdown blocks you need**.\n",
        "\n",
        "<br>\n",
        "\n",
        "4. The coursework is released on **Tuesday 19 September at 9:15h UK time**, and the answers have to be submitted on **Tuesday 19 September, 18:15h UK time**. We will not accept late submissions.\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "During the assessment:\n",
        "\n",
        "- You can use code seen in class, but indicate clearly when you do, and **make it clear (using comments or markdown blocks) what are your modifications**. This will influence your final marks.\n",
        "\n",
        "- Your final marks will depend both on the quality of your results **AND** the justification, explanation and rationale of your implementations. Code without any reference, comments or explanations in text will obtain significantly less marks than code well commented with clear justification in text blocks.\n",
        "\n",
        "- Reference any publications and other materials that you use, but keep in mind that **your implementations should be original and not copied from any online resources (we will check for plagiarism)**. It is ok to use other resources to understand concepts and draw inspiration, but always reference them properly in the notebook.\n",
        "\n",
        "- Finally, **justify your answers well, but focus on what the question is asking**. I will penalise lengthy answers that digress unnecessarily and do not address the question being addressed.\n",
        "\n",
        "<br>\n",
        "\n",
        "The coursework consists of 7 questions you have to complete. You will find them below:\n",
        "\n",
        "---\n",
        "\n",
        "<br>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KyZTroXCzEop"
      },
      "source": [
        "## Imports"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "J7r0q-LczFP3"
      },
      "outputs": [],
      "source": [
        "### write the imports you will need here.\n",
        "import torch\n",
        "from torchsummary import summary\n",
        "import torch.nn as nn\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import matplotlib.pyplot as plt\n",
        "import torchvision.transforms.functional as F\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yT8n0p4T4030"
      },
      "source": [
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "<br>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VuKIr3Q031ez"
      },
      "source": [
        "## **Question 1** [10 points]\n",
        "\n",
        "## FFN parameters and classification loss\n",
        "\n",
        "Suppose we have a feed-forward network (FFN) designed to predict which class an image belongs to. Given the following architecture and input characteristics:\n",
        "\n",
        "- Images are single channel and have a size of 67x55.\n",
        "- The FFN has 3 hidden layers of sizes 555, 712, and 555.\n",
        "- The FFN output size is 5 neurons.\n",
        "- There are bias terms everywhere.\n",
        "- The activation function in all layers except the output layer are ReLU.\n",
        "\n",
        "Answer the following questions:\n",
        "\n",
        "#### **Q1.1** How many trainable parameters does the network have? Use a code block to calculate it and explain the process (where you get all the numbers you multiply and add to find the answer) in comments or in a markdown block.\n",
        "\n",
        "Calculate the solution explicitly. If you want to implement the network and use `torchsummary` or any other similar tool, that's ok, **but only use it to validate that your answer is correct**. You will be assessed on the explicit calculation only.\n",
        "\n",
        "#### **Q1.2** What would be an appropriate loss for this problem? Explain the operations required to generate a loss value from the outputs of the network. Explain how to use the output of the network to make predictions after training is complete, and what activation function on the output layer.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "7dohBg1SBg2q"
      },
      "outputs": [],
      "source": [
        "### your code here (add as many code blocks as you need)\n",
        "class FFN(torch.nn.Module):\n",
        "    def __init__(self) :\n",
        "      super(FFN, self).__init__()\n",
        "      self.net = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            nn.Linear((67*55), 555),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(555, 712),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(712,555),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(555, 5)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        out = self.net(x)\n",
        "\n",
        "        return out"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_parameters_layer1 = (67*55)*555 + 555 # (number of pixels*next layer neurons) + (next layer neurons\"bias\")\n",
        "num_parameters_layer2 = (555*712) + 712 # (current layer neurons*next layer neurons) + (next layer neurons\"bias\")\n",
        "num_parameters_layer3 = (712*555) + 555\n",
        "num_parameters_layer4 = (555*5) + 5\n",
        "total_num_parameters = num_parameters_layer1 +num_parameters_layer2 +num_parameters_layer3 + num_parameters_layer4\n",
        "total_num_parameters"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PQbhJzOeZ98_",
        "outputId": "bea4d2ac-c118-412e-d546-0d5dc446c39e"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2840097"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = FFN()\n",
        "summary(model, (1,67,55))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S1q6qXJaaC8M",
        "outputId": "ebeafdd9-ef11-4172-858b-be6d8e48fdd4"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "           Flatten-1                 [-1, 3685]               0\n",
            "            Linear-2                  [-1, 555]       2,045,730\n",
            "              ReLU-3                  [-1, 555]               0\n",
            "            Linear-4                  [-1, 712]         395,872\n",
            "              ReLU-5                  [-1, 712]               0\n",
            "            Linear-6                  [-1, 555]         395,715\n",
            "              ReLU-7                  [-1, 555]               0\n",
            "            Linear-8                    [-1, 5]           2,780\n",
            "================================================================\n",
            "Total params: 2,840,097\n",
            "Trainable params: 2,840,097\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.01\n",
            "Forward/backward pass size (MB): 0.06\n",
            "Params size (MB): 10.83\n",
            "Estimated Total Size (MB): 10.90\n",
            "----------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since this is a classification problem, AN appropriate loss for this problem would be the use of Cross-Entropy\n",
        "\n",
        "In order to generate a loss value from the outputs of the network you need to compute the\n",
        "\n",
        "1. loss calculation:\n",
        "\n",
        "a. Transform the logits from the output layer into probabilities by applying the softmax activation function. All the logits will be converted into a probability distribution where the values sum to 1.\n",
        "\n",
        "b. Measure the difference between the predicted probabilities and the ground truth using the categorical cross-entropy loss formula. By assigning a higher penalty when the predictions deviate significantly from the ground truth probabilities.\n",
        "\n",
        "loss = -Σ(y_true * log(y_prediction))\n",
        "\n",
        "\n",
        "2. Make Predictions after training the model by:\n",
        "\n",
        "a. Sending an image through the trained network.\n",
        "\n",
        "b. Then get the output logits from the final layer, before softmax.\n",
        "\n",
        "c. Then using the softmax activation function to these logits to get the class probabilities.\n",
        "\n",
        "d. Finally, the class with the highest probability is the prediction for the model's input image.\n",
        "\n",
        "3. Apply softmax activation function to the output layer to conver output to probabilities.\n",
        "\n"
      ],
      "metadata": {
        "id": "Ray7FeVyaIZE"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rdTypqu5BgKY"
      },
      "source": [
        "text block for your answers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lzVJYQ994YNQ"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SGqxo79W8WcT"
      },
      "source": [
        "## **Question 2** [10 points]\n",
        "\n",
        "## Underfitting, overfitting, and regularisation\n",
        "\n",
        "During network training we encounter these problems:\n",
        "\n",
        "#### Q2.1 Underfitting\n",
        "\n",
        "Describe it and explain how to diagnose it during training.\n",
        "\n",
        "\n",
        "#### Q2.2 Overfitting\n",
        "\n",
        "Describe it and explain how to diagnose it during training.\n",
        "\n",
        "\n",
        "#### Q2.3 Regularisation\n",
        "\n",
        "Regularisation is designed to alleviate which one of the two problems above (underfitting or overfitting)?\n",
        "\n",
        "Provide 3 different strategies to regularise a network and explain how to implement them; you can use snippets of code in your answer (the code snippets don't need to run, but the code needs to be correct).\n",
        "\n",
        "How can you assess if applying regularisation has been effective?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "8SVow7DmBQ7d"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LCbJ4k6BBYgG"
      },
      "source": [
        "text block for your answers"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " 1. Underfitting: generally happens during network training when the network is too simple to understand the data. An exaplme of this would be trying to fit a square block in a triangular leggo block.\n",
        "\n",
        "Diagnosis: (a)We can diagnose this first looking at the performance of how well things are matching and if things are not looking good, or (b)we can compare to our training set data or (c)we can visualize the data and its predictions.\n",
        "\n",
        "2. Overfitting: genrally happens during network training when the network is too fine tuned for a specific data set. An example of this is like memerizing the subject for an exam without really understanding what you have memorized and therefore when asked to explain in your own words, it is impossible.\n",
        "\n",
        "Diagnosis: (a) first thing to do would be to check the training perfromance, to see how well its doing. A ridiculous high score would be a sign of an overfit. (b) or we can give the network a whold new dataset to see how it performes, if it performs much lower when compared to the previous training data set then there is more than likely an overfit. (c) Furthermore, the simplicity of the network can let you know how overfitted you are. A network with not too many constraints/filers is better than one with many.\n",
        "\n",
        "3. Regularisation: Regularization is a form of avoiding overfitting. it basically helps the model avoid overfitting a paticular dataset so when introduced to a new data set, its able to match it accurately.\n",
        "\n",
        "(a) Dropout\n",
        "(b) Early Stopping\n",
        "(c) L2 Regularization\n",
        "\n",
        "Assessing if applying regularisation has been effective\n",
        "\n",
        "1. Plot Training Loss and Validation Loss: If both curves remains close and don't increase significantly, regularization is likely helping. If the validation loss increases and the training loss keeps decreases, it might be overfitted.\n"
      ],
      "metadata": {
        "id": "yxZPAIkzJeyi"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E3A7feyO8WS0"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ChpkRZcTBRd6"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mOX2kBs-zHhv"
      },
      "source": [
        "## **Question 3** [10 points]\n",
        "\n",
        "## Download the MNIST dataset and flip half the samples horizontally\n",
        "\n",
        "Get the `MNIST` dataset from `torchvision.datasets`\n",
        "\n",
        "- Modify **half of the samples** in the dataset by flipping them horizontally.\n",
        "\n",
        "- Plot a matrix of 10 images (one for each class) before the horizontal fip. And plot another matrix with 10 images (one per class) after the horizontal flip.\n",
        "\n",
        "- Split the dataset (containing both non-flipped and flip samples) in a training set and a validation set as you see fit (you don't need a test dataset). Are the different sets (training and validation) well balanced? Provide evidence to support your answer."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "id": "YOJVXNOtMXof"
      },
      "outputs": [],
      "source": [
        "### your code here (add as many code blocks as you need)\n",
        "mnist= torchvision.datasets.MNIST(root='./data', train=True, transform=transforms.ToTensor(), download=True) # downloading MNIST\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# collecting images from each label\n",
        "c=0\n",
        "lbl_list =[]\n",
        "img_list =[]\n",
        "for img, lbl  in mnist:\n",
        "  if c <= 10:\n",
        "    if not (lbl in lbl_list):\n",
        "      lbl_list.append(lbl)\n",
        "      img_list.append(img)"
      ],
      "metadata": {
        "id": "1g1j1SP5xjhC"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def show(imgs): #### Taken fom torchvision tutorial ###\n",
        "    if not isinstance(imgs, list):\n",
        "        imgs = [imgs]\n",
        "    fig, axs = plt.subplots(ncols=len(imgs), squeeze=False)\n",
        "    for i, img in enumerate(imgs):\n",
        "        img = img.detach()\n",
        "        img = F.to_pil_image(img)\n",
        "        axs[0, i].imshow(np.asarray(img))\n",
        "        axs[0, i].set(xticklabels=[], yticklabels=[], xticks=[], yticks=[])"
      ],
      "metadata": {
        "id": "3bCO3hyYxlJ-"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting the samples\n",
        "grid = torchvision.utils.make_grid(img_list)\n",
        "show(grid)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "BtWCYxuUxpGi",
        "outputId": "a44e3b7c-8f92-49be-ce9e-d12948547fde"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# flipping half of mnist images\n",
        "half = len(mnist) // 2\n",
        "for i in range(half):\n",
        "    img, lbl = mnist[i]\n",
        "    #flipped_img = transforms.RandomHorizontalFlip(p=1)(img)\n",
        "    flipped_img = torch.flip(img, [2]) # horizontal flipping function\n",
        "    mnist.data[i] = (flipped_img * 255).byte() # I had a problem with the images. I found this line in stackoverflow to fix it\n",
        ""
      ],
      "metadata": {
        "id": "KevFpCnFxsdN"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# collecting images from each label and plotting\n",
        "c=0\n",
        "lbl_list =[]\n",
        "img_list =[]\n",
        "for img, lbl  in mnist:\n",
        "  if c <= 10:\n",
        "    if not (lbl in lbl_list):\n",
        "      lbl_list.append(lbl)\n",
        "      img_list.append(img)\n",
        "\n",
        "grid = torchvision.utils.make_grid(img_list)\n",
        "show(grid)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "myebtO9Cxzye",
        "outputId": "94f0187c-81dd-407b-f093-31d255a1f27a"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_mnist, eval_mnist = torch.utils.data.random_split(mnist, [0.8,0.2]) # spliting datast to train and validation datasets"
      ],
      "metadata": {
        "id": "Yl2t0pXXyNGK"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class_count_dict = {_class: 0 for _class in range(10)} # empty dict for counting the number of samples for each label\n",
        "for img, lbl  in train_mnist:\n",
        "  class_count_dict[lbl] += 1\n",
        "class_count_dict"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UIzul6aUyPtX",
        "outputId": "cec6f897-ffd0-4bc5-b4b2-13bcb77bedf4"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{0: 4773,\n",
              " 1: 5328,\n",
              " 2: 4773,\n",
              " 3: 4823,\n",
              " 4: 4683,\n",
              " 5: 4351,\n",
              " 6: 4758,\n",
              " 7: 5068,\n",
              " 8: 4656,\n",
              " 9: 4787}"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class_count_dict = {_class: 0 for _class in range(10)} # empty dict for counting the number of samples for each label\n",
        "for img, lbl  in eval_mnist:\n",
        "  class_count_dict[lbl] += 1\n",
        "class_count_dict"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hjCxPe8hybig",
        "outputId": "0b78b759-350c-446a-ab49-0d54d180f70b"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{0: 1150,\n",
              " 1: 1414,\n",
              " 2: 1185,\n",
              " 3: 1308,\n",
              " 4: 1159,\n",
              " 5: 1070,\n",
              " 6: 1160,\n",
              " 7: 1197,\n",
              " 8: 1195,\n",
              " 9: 1162}"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can see from the number of images per class shown by the dictionnaries that both of the datasets are balanced."
      ],
      "metadata": {
        "id": "65K55Jsaylwe"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3EYF70z53Yba"
      },
      "source": [
        "text block for your answers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NxE9bvBV412w"
      },
      "source": [
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "<br>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9gDJwiiz0BXE"
      },
      "source": [
        "## **Question 4** [25 points]\n",
        "\n",
        "## Create a CNN to classify whether a sample is flipped in your modified MNIST\n",
        "\n",
        "#### **Q4.1** Implement a CNN of your choice (you can re-use materials from class, but reference it clearly) to classify whether the digits of your new MNIST dataset are flipped or not.\n",
        "\n",
        "In other words, you will pass a sample of your modified dataset, and your classifier should tell you whether the digit is flipped or not.\n",
        "\n",
        "You can prepare your data in any way you see fit. For example you could:\n",
        "\n",
        "- standardise the data.\n",
        "- create data loaders.\n",
        "- modify data labels for the task as required.\n",
        "- any other data manipulation/preparation you think is adequate.\n",
        "\n",
        "#### **Q4.2** Design and implement your CNN classifier\n",
        "\n",
        "Once you have designed and implemented your CNN, calculate and provide the number of trainable parameters in your network using any tools you want (but provide the code or calculations you used, do not write the numbers of parameters alone without justification).\n",
        "\n",
        "\n",
        "#### **Q4.3** Train the network\n",
        "\n",
        "Plot loss and accuracy curves for the training and the validation dataset. You do not need to perform any hyperparameter optimisation, but justify your hyperparameter choices (for example what kind of optimiser you use, or the batch size).\n",
        "\n",
        "\n",
        "#### **Q4.4** Discuss what digits are more difficult to classify\n",
        "\n",
        "Which of the 10 original classes (0 to 9) in the dataset are harder to classify, *i.e.* they are more difficult to identify as flipped? Provide evidence in the form of confusion matrices or any other supporting data to justify your answer.\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "HyXa9uQD1Wdv"
      },
      "outputs": [],
      "source": [
        "# chqnging the labels of the dataset, 1 for flipped, 0 for normal\n",
        "for i in range(half):\n",
        "  mnist.targets[i] = 1\n",
        "for i in range(half,len(mnist)):\n",
        "  mnist.targets[i] = 0"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_mnist, eval_mnist = torch.utils.data.random_split(mnist, [0.8,0.2])"
      ],
      "metadata": {
        "id": "7iPm7VUY4zmq"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 64 # seems reasonable for this type of small images and wouldn't saturate the memory\n",
        "train_loader = torch.utils.data.DataLoader(train_mnist, batch_size=batch_size, shuffle=True) # wrapping datasets in dataloader\n",
        "eval_loader = torch.utils.data.DataLoader(eval_mnist, batch_size=batch_size, shuffle=True)"
      ],
      "metadata": {
        "id": "jS5FcSGJ44nx"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CNN(nn.Module): #### vey simple and light network in order to save time\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.net = nn.Sequential(\n",
        "        nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),\n",
        "        nn.ReLU(),\n",
        "        nn.MaxPool2d(kernel_size=2, stride=2, padding=0),\n",
        "        nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1),\n",
        "        nn.ReLU(),\n",
        "        nn.MaxPool2d(kernel_size=2, stride=2, padding=0),\n",
        "        nn.Flatten(),\n",
        "        nn.Linear(32 * 7 * 7, 64),\n",
        "        nn.ReLU(),\n",
        "        nn.Linear(64, 2))\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n",
        "\n",
        "# Initialize the classifier\n",
        "model = CNN()"
      ],
      "metadata": {
        "id": "iuSCHwJN46dZ"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "summary(model, (1,28,28))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O5_937F94-ko",
        "outputId": "07c828e5-7b70-41c7-b2fd-e78eeb4d73a8"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [-1, 32, 28, 28]             320\n",
            "              ReLU-2           [-1, 32, 28, 28]               0\n",
            "         MaxPool2d-3           [-1, 32, 14, 14]               0\n",
            "            Conv2d-4           [-1, 32, 14, 14]           9,248\n",
            "              ReLU-5           [-1, 32, 14, 14]               0\n",
            "         MaxPool2d-6             [-1, 32, 7, 7]               0\n",
            "           Flatten-7                 [-1, 1568]               0\n",
            "            Linear-8                   [-1, 64]         100,416\n",
            "              ReLU-9                   [-1, 64]               0\n",
            "           Linear-10                    [-1, 2]             130\n",
            "================================================================\n",
            "Total params: 110,114\n",
            "Trainable params: 110,114\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.00\n",
            "Forward/backward pass size (MB): 0.55\n",
            "Params size (MB): 0.42\n",
            "Estimated Total Size (MB): 0.97\n",
            "----------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 10\n",
        "loss_func = nn.CrossEntropyLoss() # classic classification loss\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr = 0.001) # ery common and apparently recomended optimizer in deep learning\n",
        "\n",
        "epoch_loss = []\n",
        "epoch_accuracy = []\n",
        "epoch_validation_loss = []\n",
        "epoch_validation_accuracy = []\n",
        "\n",
        "for epoch in range(epochs): # loop on epochs\n",
        "    model.train()\n",
        "    running_train_loss = 0\n",
        "    correct = 0\n",
        "    total_train_samples = 0\n",
        "\n",
        "    for inputs, labels in train_loader: # trainig loop\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(inputs)\n",
        "        loss = loss_func(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        running_train_loss += loss.item()\n",
        "        _, predicted = torch.max(outputs, 1)\n",
        "        total_train_samples += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "    epoch_loss.append(running_train_loss / len(train_loader))\n",
        "    train_accuracy = 100 * correct / total_train_samples\n",
        "    epoch_accuracy.append(train_accuracy)\n",
        "\n",
        "    model.eval()\n",
        "    running_valid_loss = 0\n",
        "    correct_valid = 0\n",
        "    total_valid_samples = 0\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for inputs, labels in eval_loader: # validation loop\n",
        "            outputs = model(inputs)\n",
        "            loss = loss_func(outputs, labels)\n",
        "            running_valid_loss += loss.item()\n",
        "            _, predicted = torch.max(outputs, 1)\n",
        "            total_valid_samples += labels.size(0)\n",
        "            correct_valid += (predicted == labels).sum().item()\n",
        "\n",
        "        epoch_validation_loss.append(running_valid_loss / len(eval_loader))\n",
        "        valid_accuracy = 100 * correct_valid / total_valid_samples\n",
        "        epoch_validation_accuracy.append(valid_accuracy)\n",
        "\n",
        "    print(f\"Epoch {epoch+1}/{epochs} Train Loss: {epoch_loss[-1]}, Train Accuracy: {train_accuracy}, Valid Loss: {epoch_validation_loss[-1]}, Valid Accuracy: {valid_accuracy}\")\n",
        "\n",
        "# plotting is generic code, not much uniqueness to it.\n",
        "plt.figure(figsize=(12, 4))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(epoch_loss, label=\"Train Loss\")\n",
        "plt.plot(epoch_validation_loss, label=\"Valid Loss\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.title(\"Loss Curves\")\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(epoch_accuracy, label=\"Train Accuracy\")\n",
        "plt.plot(epoch_validation_accuracy, label=\"Valid Accuracy\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Accuracy (%)\")\n",
        "plt.legend()\n",
        "plt.title(\"Accuracy Curves\")\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 584
        },
        "id": "HzF2J_4o5MfC",
        "outputId": "0472f1c0-46e9-4263-f8b4-e6cb7c3724a6"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10 Train Loss: 0.06944533712952397, Train Accuracy: 97.21875, Valid Loss: 0.02395862131100891, Valid Accuracy: 99.125\n",
            "Epoch 2/10 Train Loss: 0.0299724956699647, Train Accuracy: 98.86458333333333, Valid Loss: 0.019276142974589714, Valid Accuracy: 99.175\n",
            "Epoch 3/10 Train Loss: 0.028197140998168228, Train Accuracy: 98.9125, Valid Loss: 0.0208459733793403, Valid Accuracy: 99.26666666666667\n",
            "Epoch 4/10 Train Loss: 0.02293713877708069, Train Accuracy: 99.16041666666666, Valid Loss: 0.01779840174470124, Valid Accuracy: 99.24166666666666\n",
            "Epoch 5/10 Train Loss: 0.022418914372023816, Train Accuracy: 99.13958333333333, Valid Loss: 0.024484192796312816, Valid Accuracy: 98.975\n",
            "Epoch 6/10 Train Loss: 0.02282548704917038, Train Accuracy: 99.10416666666667, Valid Loss: 0.029329394457856827, Valid Accuracy: 99.0\n",
            "Epoch 7/10 Train Loss: 0.01706882569534355, Train Accuracy: 99.34375, Valid Loss: 0.013423450740950277, Valid Accuracy: 99.50833333333334\n",
            "Epoch 8/10 Train Loss: 0.01644630303768402, Train Accuracy: 99.37916666666666, Valid Loss: 0.026275069700514384, Valid Accuracy: 98.95833333333333\n",
            "Epoch 9/10 Train Loss: 0.014411465711382333, Train Accuracy: 99.4625, Valid Loss: 0.011927295033816104, Valid Accuracy: 99.54166666666667\n",
            "Epoch 10/10 Train Loss: 0.013423100077391913, Train Accuracy: 99.4875, Valid Loss: 0.014532417407068312, Valid Accuracy: 99.53333333333333\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "94f77ulB5OGe"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n8fEDrmP1Vw5"
      },
      "source": [
        "text block for your answers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dCQJ1CIF42n-"
      },
      "source": [
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "<br>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uXC9kTie3MRt"
      },
      "source": [
        "## **Question 5** [25 points]\n",
        "\n",
        "## Adapt the **VAE** we used in class to generate non-flipped and flipped number `5`s only.\n",
        "\n",
        "Use the VAE implementation from the lectures found in the notebook: `Morning_Session_6_VAEs_Solution.ipynb` and adapt the training loop, data loaders, and anything else you need to generate images of the digit 5, both original (non-flipped) and flipped. Explain the changes you have made.\n",
        "\n",
        "Generate and plot 25 samples with your trained VAE.\n",
        "\n",
        "Using the code provided in the VAE lecture, plot the latent space representation for 200 samples of 5s (100 non-flipped and 100 flipped), and discuss the distribution of samples in the latent space."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JZrlUj7U4KRJ"
      },
      "outputs": [],
      "source": [
        "# your code here (add as many code blocks as you need)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MfQoOjYS5cW6"
      },
      "source": [
        "text block for your answers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XsytFvvd43ud"
      },
      "source": [
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "<br>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7vkmbhgx4Zm9"
      },
      "source": [
        "## **Question 6** [10 points]\n",
        "\n",
        "## RNNs and LSTMs\n",
        "\n",
        "Given an RNN, with a single layer, that has been trained and is used to generate new outputs, like the one in the figure below:\n",
        "\n",
        "<center><img src=\"https://drive.google.com/uc?id=1GmEyTghDKdkBx0gbFrw_KOn6zuKbNaHc\" width=\"500\"/></center>\n",
        "\n",
        "[link to the figure](https://drive.google.com/file/d/1GmEyTghDKdkBx0gbFrw_KOn6zuKbNaHc/view?usp=share_link) in case you cannot see it in the notebook.\n",
        "\n",
        "<br>\n",
        "\n",
        "\n",
        "#### **Q6.2** What determines the size of the vectors $h$, $x$, and $y$ if you were trying to use an LSTM to generate text?\n",
        "\n",
        "#### **Q6.2** What are the dimensions of the matrices $W_{hh}$, $W_{xh}$ and $W_{hy}$ if the dimension of my hidden vector is 11, and the dimension of my input is 30? Justify your answers by explaining how you have calculated the dimensions.\n",
        "\n",
        "#### **Q6.3** Which of the following statements regarding LSTMs is true? Provide a short justification for all 4 statements explaining why the statement is true or false.\n",
        "\n",
        "- a) LSTMs have two vectors that are passed: the cell state and the hidden state. The hidden state is responsible for keeping 'longer term' memory in the system, while the cell state is responsible for keeping 'short term' memory.\n",
        "\n",
        "- b) All activations functions in LSTM gates are `tanh` because they need to output standardised values between -1 and 1.\n",
        "\n",
        "- c) Given the same input and hidden state vector sizes, an LSTM and an RNN have the same number of trainable parameters.\n",
        "\n",
        "- d) Both LSTMs and RNNs can have bias terms.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q6.2 If using the LSTM to generate text:\n",
        "Vector h(hidden state) size depends on the number of hidden dimension. larger models will typicall require larger dimensions.\n",
        "Vector y(output) is determined by the number of possible output class.\n",
        "Vector x(input vector) is the dimension of the text....\n",
        "\n",
        "Q6.2 if the dimension of my hidden vector is 11, and the dimension of my input is 30:\n",
        "\n",
        "W_hh which is the Hidden-to-Hidden Weight Matrix will be of size (11, 11). This will transform the hidden state to the current hidden state.\n",
        "\n",
        "W_xh which is the Input-to-Hidden Weight Matrix will be of size (11, 30). This will transform the input x into the hidden state.\n",
        "\n",
        "W_hy which is the Hidden-to-Output Weight Matrix depends on what you want as the desired output dimension. (vocabulary_size, 11)\n",
        "\n",
        "6.3\n",
        "a) True:\n",
        "b) True:tanh outputs values between -1 and 1, which helps in controlling the flow of information in the LSTM cell.\n",
        "c) False: LSTMs have more parameters such as (input, forget, and output gates) when compared to standard RNNs\n",
        "d) True:Bias terms are needed to introduce an offset in the activation functions, that allows the model to fit the data more accurately by adjusting the intercept."
      ],
      "metadata": {
        "id": "aHUUSTICn02z"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z6EL0Qm1wvfD"
      },
      "outputs": [],
      "source": [
        "### your code here, if you need any (add as many code blocks as you need)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oNNJTWp56MRU"
      },
      "source": [
        "text block for your answers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R79Gp-Yc45-m"
      },
      "source": [
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "<br>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j4VacjK50Rcv"
      },
      "source": [
        "## **Question 7**  [10 points]\n",
        "\n",
        "## Transformers\n",
        "\n",
        "In the original publication [attention is all you need](https://arxiv.org/abs/1706.03762), the authors introduce the concept of self-attention and build a transformer architecture using a multi-head attention mechanism.\n",
        "\n",
        "#### Q7.1 Explain why it is necessary to use an embedding layer.\n",
        "\n",
        "#### Q7.2 Explain how the attention mechanism works: what vectors are created from the embedded input and what are the trainable parameters in a single attention layer (no multi-head).\n",
        "\n",
        "#### Q7.3 In the publication, the dimension of the input vector size to each head is equal to the length of the original input vector divided by the number of heads. Is that an strict requirement? And what is the justification for this choice?\n",
        "\n",
        "#### Q7.4 Where, how (to what data), and why is masking applied on the decoder of a transformer?"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 7.1\n",
        "Embedding layers can convert the input tokens and output tokens to vectors of dimension dmodel.\n",
        "Embedding layers allows sharing knowledge among similar input, which helps the model generalize.\n",
        "Embedding layers makes computations more efficient by reducing input dimensionality.\n",
        "\n",
        "Q 7.2\n",
        "where the query, keys, values, and output are all vectors created from the embedded input.\n",
        "Weight matrices and attention score.\n",
        "The attention scores are used to weight values for every element in line. The weighted values are summed, which then gives the attention output vector.\n",
        "\n",
        "Q7.3\n",
        "This is not considered a strict requirement that the dimension of the input vector size to each head is equal to the length of the original input vector divided by the number of heads. It is made to be more efficient and thus facilitates parallelization.\n",
        "\n",
        "Q7.4\n",
        "How: Masking is applied in the decoder of a transform to d to prevent leftward\n",
        "information flow in the decoder to preserve the auto-regressive property, thus We mask out all values in the input of the softmax which correspond to illegal connections.\n",
        "\n",
        "Where: the attention mechanism within the decoder layers of the Transformer.\n",
        "\n",
        "To What Data: To the input data in the decoder, which helps the model focus only to generated tokens during auto-regressive decoding.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "iF-v3O8iEho3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "eU-SEhd3Egy7"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s6XhR5yT1P77"
      },
      "outputs": [],
      "source": [
        "# if you need to use code snippets in your answer use this block (and add as many code blocks as you need)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Emu4gNjE3SXT"
      },
      "source": [
        "text block for your answers"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "gpuClass": "premium",
      "provenance": []
    },
    "gpuClass": "premium",
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}